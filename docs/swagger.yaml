basePath: /
definitions:
  models.CreateActor:
    properties:
      birth_date:
        type: string
      gender:
        enum:
        - M
        - W
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.CreateMovie:
    properties:
      actors:
        items:
          type: integer
        type: array
      description:
        maxLength: 1000
        type: string
      rating:
        maximum: 10
        minimum: 0
        type: integer
      release_date:
        type: string
      title:
        maxLength: 150
        minLength: 1
        type: string
    required:
    - release_date
    - title
    type: object
  models.MovieArr:
    properties:
      movie_id:
        type: integer
      title:
        type: string
    type: object
  models.ResponseActor:
    properties:
      actor_id:
        type: integer
      birth_date:
        type: string
      gender:
        type: string
      movie:
        items:
          $ref: '#/definitions/models.MovieArr'
        type: array
      name:
        type: string
    type: object
  models.ResponseMovie:
    properties:
      description:
        type: string
      movie_id:
        type: integer
      rating:
        type: integer
      release_date:
        type: string
      title:
        type: string
    type: object
  models.UpdateActor:
    properties:
      actor_id:
        type: integer
      birth_date:
        type: string
      gender:
        enum:
        - M
        - W
        - "N"
        type: string
      name:
        type: string
    required:
    - actor_id
    type: object
  models.UpdateMovie:
    properties:
      description:
        maxLength: 1000
        type: string
      movie_id:
        type: integer
      rating:
        maximum: 10
        minimum: -1
        type: integer
      release_date:
        type: string
      title:
        maxLength: 150
        type: string
    required:
    - movie_id
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: dimka.komarov@bk.ru
    name: FilmLibrary API Support
    url: https://t.me/Kosmatoff
  description: Server API for FilmLibrary Application
  title: FilmLibrary API
  version: 1.0.0
paths:
  /actor:
    get:
      description: Get by actors array with film information.
      produces:
      - application/json
      responses:
        "200":
          description: Array actor with film information
          schema:
            items:
              $ref: '#/definitions/models.ResponseActor'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get actors
      tags:
      - movies
  /actors/add:
    post:
      consumes:
      - application/json
      description: Add a new actor to the database
      parameters:
      - description: Movie details
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.CreateActor'
      produces:
      - application/json
      responses:
        "200":
          description: Actor ID
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a new actor
      tags:
      - actors
  /actors/update:
    put:
      consumes:
      - application/json
      description: Update actor to the database
      parameters:
      - description: Actor details
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.UpdateActor'
      produces:
      - application/json
      responses:
        "200":
          description: Update movie response
          schema:
            $ref: '#/definitions/models.UpdateActor'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update actor
      tags:
      - actors
  /movies:
    get:
      description: Get sort movies use query
      parameters:
      - description: string enums
        enum:
        - A
        - B
        - C
        in: query
        name: enumstring
        type: string
      - description: int enums
        enum:
        - 1
        - 2
        - 3
        in: query
        name: enumint
        type: integer
      - description: int enums
        enum:
        - 1.1
        - 1.2
        - 1.3
        in: query
        name: enumnumber
        type: number
      - description: string valid
        in: query
        maxLength: 10
        minLength: 5
        name: string
        type: string
      - description: int valid
        in: query
        maximum: 10
        minimum: 1
        name: int
        type: integer
      - default: A
        description: string default
        in: query
        name: default
        type: string
      - description: string example
        example: string
        in: query
        name: example
        type: string
      - collectionFormat: multi
        description: string collection
        in: query
        items:
          type: string
        name: collection
        type: array
      - collectionFormat: csv
        description: string collection
        in: query
        items:
          type: string
        name: extensions
        type: array
        x-example: test
        x-nullable: true
      produces:
      - application/json
      responses:
        "200":
          description: Response array
          schema:
            items:
              $ref: '#/definitions/models.ResponseMovie'
            type: array
        "400":
          description: Client error
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get sort movies
      tags:
      - movies
  /movies/add:
    post:
      consumes:
      - application/json
      description: Add a new movie to the database
      parameters:
      - description: Movie details
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.CreateMovie'
      produces:
      - application/json
      responses:
        "200":
          description: Movie ID
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a new movie
      tags:
      - movies
  /movies/delete:
    delete:
      description: Delete movie to the database
      parameters:
      - description: uint valid
        in: query
        name: uint
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Delete id
          schema:
            type: integer
        "400":
          description: Client error
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete movie
      tags:
      - movies
  /movies/search:
    get:
      description: Search by actor name or movie title.
      parameters:
      - description: Actor name
        in: query
        name: actor_name
        type: string
      - description: Movie title
        in: query
        name: movie_title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Array movie or null value
          schema:
            items:
              $ref: '#/definitions/models.ResponseMovie'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Search movie
      tags:
      - movies
  /movies/update:
    put:
      consumes:
      - application/json
      description: Update movie to the database
      parameters:
      - description: Movie details
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.UpdateMovie'
      produces:
      - application/json
      responses:
        "200":
          description: Update movie response
          schema:
            $ref: '#/definitions/models.UpdateMovie'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update movie
      tags:
      - movies
swagger: "2.0"
