// Code generated by MockGen. DO NOT EDIT.
// Source: movie.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/DmitriyKomarovCoder/Film_library/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockUsecase) CreateMovie(film *models.CreateMovie) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", film)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockUsecaseMockRecorder) CreateMovie(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockUsecase)(nil).CreateMovie), film)
}

// DeleteMovie mocks base method.
func (m *MockUsecase) DeleteMovie(filmID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", filmID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockUsecaseMockRecorder) DeleteMovie(filmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockUsecase)(nil).DeleteMovie), filmID)
}

// GetMovies mocks base method.
func (m *MockUsecase) GetMovies(querySort, direction string) ([]models.ResponseMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", querySort, direction)
	ret0, _ := ret[0].([]models.ResponseMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockUsecaseMockRecorder) GetMovies(querySort, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockUsecase)(nil).GetMovies), querySort, direction)
}

// SearchMovie mocks base method.
func (m *MockUsecase) SearchMovie(actorName, filmName string) ([]models.ResponseMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovie", actorName, filmName)
	ret0, _ := ret[0].([]models.ResponseMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovie indicates an expected call of SearchMovie.
func (mr *MockUsecaseMockRecorder) SearchMovie(actorName, filmName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovie", reflect.TypeOf((*MockUsecase)(nil).SearchMovie), actorName, filmName)
}

// UpdateMovie mocks base method.
func (m *MockUsecase) UpdateMovie(film *models.UpdateMovie) (*models.UpdateMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", film)
	ret0, _ := ret[0].(*models.UpdateMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockUsecaseMockRecorder) UpdateMovie(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockUsecase)(nil).UpdateMovie), film)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockRepository) CreateMovie(movie *models.CreateMovie) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", movie)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockRepositoryMockRecorder) CreateMovie(movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockRepository)(nil).CreateMovie), movie)
}

// DeleteMovie mocks base method.
func (m *MockRepository) DeleteMovie(movieID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", movieID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockRepositoryMockRecorder) DeleteMovie(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockRepository)(nil).DeleteMovie), movieID)
}

// GetMovie mocks base method.
func (m *MockRepository) GetMovie(movieID uint) (models.UpdateMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", movieID)
	ret0, _ := ret[0].(models.UpdateMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockRepositoryMockRecorder) GetMovie(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockRepository)(nil).GetMovie), movieID)
}

// GetMovies mocks base method.
func (m *MockRepository) GetMovies(querySort, direction string) ([]models.ResponseMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", querySort, direction)
	ret0, _ := ret[0].([]models.ResponseMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockRepositoryMockRecorder) GetMovies(querySort, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockRepository)(nil).GetMovies), querySort, direction)
}

// SearchMovie mocks base method.
func (m *MockRepository) SearchMovie(actorName, movieName string) ([]models.ResponseMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovie", actorName, movieName)
	ret0, _ := ret[0].([]models.ResponseMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovie indicates an expected call of SearchMovie.
func (mr *MockRepositoryMockRecorder) SearchMovie(actorName, movieName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovie", reflect.TypeOf((*MockRepository)(nil).SearchMovie), actorName, movieName)
}

// UpdateMovie mocks base method.
func (m *MockRepository) UpdateMovie(movie *models.UpdateMovie) (*models.UpdateMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", movie)
	ret0, _ := ret[0].(*models.UpdateMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockRepositoryMockRecorder) UpdateMovie(movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockRepository)(nil).UpdateMovie), movie)
}
